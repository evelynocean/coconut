// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: coconut.proto

package coconut

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{0}
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{1}
}

func (x *Pong) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新統計點數參數
type PointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level_1  string `protobuf:"bytes,1,opt,name=level_1,json=level1,proto3" json:"level_1,omitempty"`       // 第一層, 最上層代號
	Level_2  string `protobuf:"bytes,2,opt,name=level_2,json=level2,proto3" json:"level_2,omitempty"`       // 第二層代號
	Level_3  string `protobuf:"bytes,3,opt,name=level_3,json=level3,proto3" json:"level_3,omitempty"`       // 第三層代號
	UserName string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` // 操作員代號
	Point    int32  `protobuf:"varint,5,opt,name=point,proto3" json:"point,omitempty"`                      // 施作點數
}

func (x *PointsRequest) Reset() {
	*x = PointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsRequest) ProtoMessage() {}

func (x *PointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsRequest.ProtoReflect.Descriptor instead.
func (*PointsRequest) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{2}
}

func (x *PointsRequest) GetLevel_1() string {
	if x != nil {
		return x.Level_1
	}
	return ""
}

func (x *PointsRequest) GetLevel_2() string {
	if x != nil {
		return x.Level_2
	}
	return ""
}

func (x *PointsRequest) GetLevel_3() string {
	if x != nil {
		return x.Level_3
	}
	return ""
}

func (x *PointsRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PointsRequest) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type RetResultStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 回傳處理結果
}

func (x *RetResultStatus) Reset() {
	*x = RetResultStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetResultStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetResultStatus) ProtoMessage() {}

func (x *RetResultStatus) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetResultStatus.ProtoReflect.Descriptor instead.
func (*RetResultStatus) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{3}
}

func (x *RetResultStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`      // 層級名稱
	Points int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"` // 點數
}

func (x *PointInfo) Reset() {
	*x = PointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInfo) ProtoMessage() {}

func (x *PointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInfo.ProtoReflect.Descriptor instead.
func (*PointInfo) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{4}
}

func (x *PointInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PointInfo) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type RetPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PointInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // 回傳當前資料
}

func (x *RetPoints) Reset() {
	*x = RetPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetPoints) ProtoMessage() {}

func (x *RetPoints) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetPoints.ProtoReflect.Descriptor instead.
func (*RetPoints) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{5}
}

func (x *RetPoints) GetData() []*PointInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level_1 string `protobuf:"bytes,1,opt,name=level_1,json=level1,proto3" json:"level_1,omitempty"` // 第一層, 最上層代號
	Level_2 string `protobuf:"bytes,2,opt,name=level_2,json=level2,proto3" json:"level_2,omitempty"` // 第二層代號
	Level_3 string `protobuf:"bytes,3,opt,name=level_3,json=level3,proto3" json:"level_3,omitempty"` // 第三層代號
}

func (x *GetPointsRequest) Reset() {
	*x = GetPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coconut_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointsRequest) ProtoMessage() {}

func (x *GetPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coconut_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointsRequest.ProtoReflect.Descriptor instead.
func (*GetPointsRequest) Descriptor() ([]byte, []int) {
	return file_coconut_proto_rawDescGZIP(), []int{6}
}

func (x *GetPointsRequest) GetLevel_1() string {
	if x != nil {
		return x.Level_1
	}
	return ""
}

func (x *GetPointsRequest) GetLevel_2() string {
	if x != nil {
		return x.Level_2
	}
	return ""
}

func (x *GetPointsRequest) GetLevel_3() string {
	if x != nil {
		return x.Level_3
	}
	return ""
}

var File_coconut_proto protoreflect.FileDescriptor

var file_coconut_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x37, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x32, 0xba, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75,
	0x74, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e,
	0x75, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x63, 0x6f,
	0x6e, 0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x52,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x3b, 0x63, 0x6f, 0x63, 0x6f, 0x6e, 0x75, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coconut_proto_rawDescOnce sync.Once
	file_coconut_proto_rawDescData = file_coconut_proto_rawDesc
)

func file_coconut_proto_rawDescGZIP() []byte {
	file_coconut_proto_rawDescOnce.Do(func() {
		file_coconut_proto_rawDescData = protoimpl.X.CompressGZIP(file_coconut_proto_rawDescData)
	})
	return file_coconut_proto_rawDescData
}

var file_coconut_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_coconut_proto_goTypes = []interface{}{
	(*PingRequest)(nil),      // 0: coconut.PingRequest
	(*Pong)(nil),             // 1: coconut.Pong
	(*PointsRequest)(nil),    // 2: coconut.PointsRequest
	(*RetResultStatus)(nil),  // 3: coconut.RetResultStatus
	(*PointInfo)(nil),        // 4: coconut.PointInfo
	(*RetPoints)(nil),        // 5: coconut.RetPoints
	(*GetPointsRequest)(nil), // 6: coconut.GetPointsRequest
}
var file_coconut_proto_depIdxs = []int32{
	4, // 0: coconut.RetPoints.data:type_name -> coconut.PointInfo
	0, // 1: coconut.Coconut.Ping:input_type -> coconut.PingRequest
	2, // 2: coconut.Coconut.UpdatePoints:input_type -> coconut.PointsRequest
	6, // 3: coconut.Coconut.GetPoints:input_type -> coconut.GetPointsRequest
	1, // 4: coconut.Coconut.Ping:output_type -> coconut.Pong
	3, // 5: coconut.Coconut.UpdatePoints:output_type -> coconut.RetResultStatus
	5, // 6: coconut.Coconut.GetPoints:output_type -> coconut.RetPoints
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_coconut_proto_init() }
func file_coconut_proto_init() {
	if File_coconut_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coconut_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetResultStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coconut_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coconut_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coconut_proto_goTypes,
		DependencyIndexes: file_coconut_proto_depIdxs,
		MessageInfos:      file_coconut_proto_msgTypes,
	}.Build()
	File_coconut_proto = out.File
	file_coconut_proto_rawDesc = nil
	file_coconut_proto_goTypes = nil
	file_coconut_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoconutClient is the client API for Coconut service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoconutClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error)
	// 更新統計點數
	UpdatePoints(ctx context.Context, in *PointsRequest, opts ...grpc.CallOption) (*RetResultStatus, error)
	// 取得點數統計狀況
	GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*RetPoints, error)
}

type coconutClient struct {
	cc grpc.ClientConnInterface
}

func NewCoconutClient(cc grpc.ClientConnInterface) CoconutClient {
	return &coconutClient{cc}
}

func (c *coconutClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/coconut.Coconut/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coconutClient) UpdatePoints(ctx context.Context, in *PointsRequest, opts ...grpc.CallOption) (*RetResultStatus, error) {
	out := new(RetResultStatus)
	err := c.cc.Invoke(ctx, "/coconut.Coconut/UpdatePoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coconutClient) GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*RetPoints, error) {
	out := new(RetPoints)
	err := c.cc.Invoke(ctx, "/coconut.Coconut/GetPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoconutServer is the server API for Coconut service.
type CoconutServer interface {
	Ping(context.Context, *PingRequest) (*Pong, error)
	// 更新統計點數
	UpdatePoints(context.Context, *PointsRequest) (*RetResultStatus, error)
	// 取得點數統計狀況
	GetPoints(context.Context, *GetPointsRequest) (*RetPoints, error)
}

// UnimplementedCoconutServer can be embedded to have forward compatible implementations.
type UnimplementedCoconutServer struct {
}

func (*UnimplementedCoconutServer) Ping(context.Context, *PingRequest) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCoconutServer) UpdatePoints(context.Context, *PointsRequest) (*RetResultStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoints not implemented")
}
func (*UnimplementedCoconutServer) GetPoints(context.Context, *GetPointsRequest) (*RetPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}

func RegisterCoconutServer(s *grpc.Server, srv CoconutServer) {
	s.RegisterService(&_Coconut_serviceDesc, srv)
}

func _Coconut_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoconutServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coconut.Coconut/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoconutServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coconut_UpdatePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoconutServer).UpdatePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coconut.Coconut/UpdatePoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoconutServer).UpdatePoints(ctx, req.(*PointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coconut_GetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoconutServer).GetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coconut.Coconut/GetPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoconutServer).GetPoints(ctx, req.(*GetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coconut_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coconut.Coconut",
	HandlerType: (*CoconutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Coconut_Ping_Handler,
		},
		{
			MethodName: "UpdatePoints",
			Handler:    _Coconut_UpdatePoints_Handler,
		},
		{
			MethodName: "GetPoints",
			Handler:    _Coconut_GetPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coconut.proto",
}
